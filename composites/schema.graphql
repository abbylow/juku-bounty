type Profile
  @createModel(accountRelation: SINGLE, description: "User profile")
  @createIndex(fields: [{ path: "username" }]) {
  displayName: String! @string(minLength: 1, maxLength: 100)
  username: String!
  bio: String @string(maxLength: 160)
  pfp: String @string(maxLength: 100)
  # topics: [Topic] @relationFrom(model: "ProfileTopic", property: "profileId") # this doesn't work, try the line below
  profileCategories: [ProfileCategory]
    @relationFrom(model: "ProfileCategory", property: "profileId")
  bounties: [Bounty] @relationFrom(model: "Bounty", property: "profileId")
  platforms: [Platform] @relationFrom(model: "Platform", property: "profileId")
  privacySettings: PrivacySettings
  notificationSettings: NotificationSettings
  notifications: [Notification]
    @relationFrom(model: "Notification", property: "profileId")
  followers: [Follow] @relationFrom(model: "Follow", property: "followeeId")
  followersCount: Int!
    @relationCountFrom(model: "Follow", property: "followeeId")
  author: DID! @documentAccount
  walletAddress: String
  loginMethod: String
  createdAt: DateTime!
  editedAt: DateTime!
  data: String @string(maxLength: 1000)
  context: String @string(maxLength: 100)
}

type Bounty
  @createModel(accountRelation: LIST, description: "Bounty")
  @createIndex(fields: [{ path: "title" }])
  @createIndex(fields: [{ path: "description" }])
  @createIndex(fields: [{ path: "expiry" }]) {
  title: String! @string(maxLength: 200)
  description: String @string(maxLength: 1000)
  numberOfRewarders: Int!
  rewardCurrency: String! @string(maxLength: 100)
  amountPerRewarder: Float!
  expiry: DateTime!
  # topics: [Topic] @relationFrom(model: "BountyTopic", property: "bountyId") # this doesn't work, try the line below
  bountyCategories: [BountyCategory]
    @relationFrom(model: "BountyCategory", property: "bountyId")
  # tags: [Tag] @relationFrom(model: "BountyTag", property: "bountyId") # this doesn't work, try the line below
  bountyTags: [BountyTag]
    @relationFrom(model: "BountyTag", property: "bountyId")
  profileId: StreamID! @documentReference(model: "Profile")
  profile: Profile! @relationDocument(property: "profileId")
  author: DID! @documentAccount
  createdAt: DateTime!
  editedAt: DateTime!
  data: String @string(maxLength: 1000)
  context: String @string(maxLength: 100)
  contributions: [Contribution]
    @relationFrom(model: "Contribution", property: "bountyId")
  likes: [Like] @relationFrom(model: "Like", property: "bountyId")
  deposit: BountyDeposit
  isWinnerPicked: Boolean
  results: [BountyWinner]
    @relationFrom(model: "BountyWinner", property: "bountyId")
  settlements: [BountySettlement]
    @relationFrom(model: "BountySettlement", property: "bountyId")
}

type BountyDeposit
  @createModel(accountRelation: LIST, description: "Winner of a bounty")
  @createIndex(fields: [{ path: "bountyId" }]) {
  bountyId: StreamID! @documentReference(model: "Bounty")
  bounty: Bounty! @relationDocument(property: "bountyId")
  txId: String!
  chainId: String!
  escrowContractAddress: String!
  profileId: StreamID! @documentReference(model: "Profile") # who deposits
  profile: Profile! @relationDocument(property: "profileId") 
  author: DID! @documentAccount # the result must be created by the system / bounty creator
  createdAt: DateTime!
  editedAt: DateTime!
  data: String @string(maxLength: 1000)
  context: String @string(maxLength: 100)
}

type BountyWinner
  @createModel(accountRelation: LIST, description: "deposit info of a bounty")
  @createIndex(fields: [{ path: "bountyId" }])
  @createIndex(fields: [{ path: "contributionId" }]) {
  bountyId: StreamID! @documentReference(model: "Bounty")
  bounty: Bounty! @relationDocument(property: "bountyId")
  contributionId: StreamID! @documentReference(model: "Contribution")
  contribution: Contribution! @relationDocument(property: "contributionId")
  percentageOfReward: Float! # how many percentage should this winner get in one portion of reward; referrer 20% referee 80% or 100% for sole contributor
  author: DID! @documentAccount # the result must be created by the system / bounty creator
  createdAt: DateTime!
  editedAt: DateTime!
  data: String @string(maxLength: 1000)
  context: String @string(maxLength: 100)
}

# settlement can be refund to creator / reward distribution to contributor and referrer if any
# if the contribution has referrer and referree, then we need to create two separate settlement instance for them
type BountySettlement
  @createModel(accountRelation: LIST, description: "Settlement of a bounty")
  @createIndex(fields: [{ path: "bountyId" }]) 
  @createIndex(fields: [{ path: "contributionId" }])
  @createIndex(fields: [{ path: "payeeId" }]) 
  @createIndex(fields: [{ path: "txId" }]) {
  bountyId: StreamID! @documentReference(model: "Bounty")
  bounty: Bounty! @relationDocument(property: "bountyId")
  contributionId: StreamID @documentReference(model: "Contribution") # can be empty if this is a refund to creator
  contribution: Contribution @relationDocument(property: "contributionId") # can be empty if this is a refund to creator
  payeeId: StreamID! @documentReference(model: "Profile") # who being paid
  payee: Profile! @relationDocument(property: "payeeId")
  payeeWallet: String!
  rewardCurrency: String! @string(maxLength: 100)
  amount: Float!
  txId: String!
  chainId: String!
  author: DID! @documentAccount # the result must be created by the system / bounty creator?
  createdAt: DateTime!
  editedAt: DateTime!
  data: String @string(maxLength: 1000)
  context: String @string(maxLength: 100)
}

type Category
  @createModel(accountRelation: LIST, description: "Category")
  @createIndex(fields: [{ path: "slug" }]) {
  name: String! @string(minLength: 1, maxLength: 300)
  slug: String! @string(minLength: 1, maxLength: 300)
  author: DID! @documentAccount
  createdAt: DateTime!
  editedAt: DateTime!
  # profiles: [Profile] @relationFrom(model: "ProfileTopic", property: "topicId") # this doesn't work, try the line below
  profileCategories: [ProfileCategory]
    @relationFrom(model: "ProfileCategory", property: "categoryId")
  # bounties: [Bounty] @relationFrom(model: "BountyTopic", property: "topicId") # this doesn't work, try the line below
  bountyCategories: [BountyCategory]
    @relationFrom(model: "BountyCategory", property: "categoryId")
  data: String @string(maxLength: 1000)
  context: String @string(maxLength: 100)
}

type ProfileCategory
  @createModel(
    accountRelation: LIST
    description: "Join table for Profile and Category"
  )
  @createIndex(fields: [{ path: "profileId" }])
  @createIndex(fields: [{ path: "categoryId" }])
  @createIndex(fields: [{ path: "active" }]) {
  profileId: StreamID! @documentReference(model: "Profile")
  profile: Profile! @relationDocument(property: "profileId")
  categoryId: StreamID! @documentReference(model: "Category")
  category: Category! @relationDocument(property: "categoryId")
  active: Boolean!
  createdAt: DateTime!
  editedAt: DateTime!
}

type BountyCategory
  @createModel(
    accountRelation: LIST
    description: "Join table for Bounty and Category"
  )
  @createIndex(fields: [{ path: "bountyId" }])
  @createIndex(fields: [{ path: "categoryId" }])
  @createIndex(fields: [{ path: "active" }]) {
  bountyId: StreamID! @documentReference(model: "Bounty")
  bounty: Bounty! @relationDocument(property: "bountyId")
  categoryId: StreamID! @documentReference(model: "Category")
  category: Category! @relationDocument(property: "categoryId")
  active: Boolean!
  createdAt: DateTime!
  editedAt: DateTime!
}

type Tag
  @createModel(accountRelation: LIST, description: "Tag")
  @createIndex(fields: [{ path: "slug" }]) {
  name: String! @string(minLength: 1, maxLength: 300)
  slug: String! @string(minLength: 1, maxLength: 300)
  author: DID! @documentAccount
  createdAt: DateTime!
  editedAt: DateTime!
  # bounties: [Bounty] @relationFrom(model: "BountyTopic", property: "topicId") # this doesn't work, try the line below
  bountyTags: [BountyTag] @relationFrom(model: "BountyTag", property: "tagId")
  data: String @string(maxLength: 1000)
  context: String @string(maxLength: 100)
}

type BountyTag
  @createModel(
    accountRelation: LIST
    description: "Join table for Bounty and Tag"
  )
  @createIndex(fields: [{ path: "bountyId" }])
  @createIndex(fields: [{ path: "tagId" }])
  @createIndex(fields: [{ path: "active" }]) {
  bountyId: StreamID! @documentReference(model: "Bounty")
  bounty: Bounty! @relationDocument(property: "bountyId")
  tagId: StreamID! @documentReference(model: "Tag")
  tag: Tag! @relationDocument(property: "tagId")
  active: Boolean!
  createdAt: DateTime!
  editedAt: DateTime!
}

interface Platform @createModel(description: "Platform integration interface") {
  name: String! @string(maxLength: 100)
  verified: Boolean!
  profileId: StreamID! @documentReference(model: "Profile")
  profile: Profile! @relationDocument(property: "profileId")
  data: String @string(maxLength: 1000)
  context: String @string(maxLength: 100)
  createdAt: DateTime!
  editedAt: DateTime!
}

type CoinbaseIntegration implements Platform
  @createModel(description: "Platform integration - Coinbase") {
  name: String! @string(maxLength: 100)
  verified: Boolean!
  profileId: StreamID! @documentReference(model: "Profile")
  profile: Profile! @relationDocument(property: "profileId")
  data: String @string(maxLength: 1000)
  context: String @string(maxLength: 100)
  createdAt: DateTime!
  editedAt: DateTime!
}

type LinkedInIntegration implements Platform
  @createModel(description: "Platform integration - LinkedIn") {
  name: String! @string(maxLength: 100)
  verified: Boolean!
  profileId: StreamID! @documentReference(model: "Profile")
  profile: Profile! @relationDocument(property: "profileId")
  data: String @string(maxLength: 1000)
  context: String @string(maxLength: 100)
  createdAt: DateTime!
  editedAt: DateTime!
}

type Follow
  @createModel(
    accountRelation: LIST
    description: "A user follows another user"
  )
  @createIndex(fields: [{ path: "followerId" }])
  @createIndex(fields: [{ path: "followeeId" }])
  @createIndex(fields: [{ path: "active" }]) {
  author: DID! @documentAccount
  active: Boolean!
  followerId: StreamID! @documentReference(model: "Profile") # who initiates the follow action
  follower: Profile! @relationDocument(property: "followerId")
  followeeId: StreamID! @documentReference(model: "Profile") # who receives the follow
  followee: Profile! @relationDocument(property: "followeeId")
  data: String @string(maxLength: 1000)
  context: String @string(maxLength: 100)
  createdAt: DateTime!
  editedAt: DateTime!
}

type PrivacySettings {
  allowReferGroup: String @string(maxLength: 100)
  allowReferKnowledgeBounty: Boolean
  allowReferConsultation: Boolean
  allowViewPortfolioGroup: String @string(maxLength: 100)
  allowViewWorkExperience: Boolean
  allowViewSkillAttestation: Boolean
  allowViewPeerRecommendation: Boolean
  data: String @string(maxLength: 1000)
  context: String @string(maxLength: 100)
}

type NotificationSettings {
  platformNewFeature: Boolean
  platformNewQuest: Boolean
  newContributionToInvolvedQuest: Boolean
  newLikesToInvolvedQuest: Boolean
  newRepliesToInvolvedQuest: Boolean
  statusChangeToInvolvedQuest: Boolean
  beMentioned: Boolean
  data: String @string(maxLength: 1000)
  context: String @string(maxLength: 100)
}

type Notification
  @createModel(accountRelation: LIST, description: "In app notifications") {
  title: String @string(maxLength: 80)
  description: String @string(maxLength: 1000)
  type: String! @string(maxLength: 100)
  viewed: Boolean
  profileId: StreamID! @documentReference(model: "Profile")
  profile: Profile! @relationDocument(property: "profileId")
  data: String @string(maxLength: 1000)
  context: String @string(maxLength: 100)
  createdAt: DateTime!
  editedAt: DateTime!
}

type Like
  @createModel(
    description: "Like on a bounty"
    accountRelation: SET
    accountRelationFields: ["bountyId"]
  )
  @createIndex(fields: [{ path: "bountyId" }])
  @createIndex(fields: [{ path: "active" }]) {
  active: Boolean!
  bountyId: StreamID! @documentReference(model: "Bounty")
  bounty: Bounty! @relationDocument(property: "bountyId")
  profileId: StreamID! @documentReference(model: "Profile")
  profile: Profile! @relationDocument(property: "profileId")
  author: DID! @documentAccount
  createdAt: DateTime!
  editedAt: DateTime!
}

type Contribution
  @createModel(accountRelation: LIST, description: "Contribution on a bounty")
  @createIndex(fields: [{ path: "bountyId" }])
  @createIndex(fields: [{ path: "profileId" }])
  @createIndex(fields: [{ path: "referrerId" }])
  @createIndex(fields: [{ path: "referreeId" }]) {
  bountyId: StreamID! @documentReference(model: "Bounty")
  bounty: Bounty! @relationDocument(property: "bountyId")
  profileId: StreamID! @documentReference(model: "Profile") # contribution creator
  profile: Profile! @relationDocument(property: "profileId") # contribution creator
  author: DID! @documentAccount
  referrerId: StreamID @documentReference(model: "Profile") # who refers the candidate
  referrer: Profile @relationDocument(property: "referrerId")
  referreeId: StreamID @documentReference(model: "Profile") # who is referred
  referree: Profile @relationDocument(property: "referreeId")
  comments: [Comment]
    @relationFrom(model: "Comment", property: "contributionId")
  text: String! @string(maxLength: 2000)
  data: String @string(maxLength: 1000)
  context: String @string(maxLength: 100)
  createdAt: DateTime!
  editedAt: DateTime!
}

type Comment
  @createModel(accountRelation: LIST, description: "Comment on a contribution")
  @createIndex(fields: [{ path: "contributionId" }])
  @createIndex(fields: [{ path: "replyToId" }])
  @createIndex(fields: [{ path: "profileId" }]) {
  contributionId: StreamID! @documentReference(model: "Contribution")
  contribution: Contribution! @relationDocument(property: "contributionId")
  replyToId: StreamID @documentReference(model: "Comment")
  replyTo: Comment @relationDocument(property: "replyToId")
  mentions: [Mention] @relationFrom(model: "Mention", property: "commentId")
  profileId: StreamID! @documentReference(model: "Profile") # creator
  profile: Profile! @relationDocument(property: "profileId")
  author: DID! @documentAccount
  text: String! @string(maxLength: 2000)
  data: String @string(maxLength: 1000)
  context: String @string(maxLength: 100)
  createdAt: DateTime!
  editedAt: DateTime!
}

type Mention
  @createModel(accountRelation: LIST, description: "Mention on a comment")
  @createIndex(fields: [{ path: "commentId" }])
  @createIndex(fields: [{ path: "profileId" }]) {
  commentId: StreamID! @documentReference(model: "Comment")
  comment: Comment! @relationDocument(property: "commentId")
  profileId: StreamID! @documentReference(model: "Profile") # creator
  profile: Profile! @relationDocument(property: "profileId")
  author: DID! @documentAccount
  text: String! @string(maxLength: 2000)
  data: String @string(maxLength: 1000)
  context: String @string(maxLength: 100)
  createdAt: DateTime!
  editedAt: DateTime!
}
